type Transfer @entity(immutable: true) {
  id: String!
  from: Member!
  to: Member!
  value: BigInt! # uint256
}

# type MintAndApprove @entity {
#   id: String!
#   spender: Bytes! # address
#   amount: BigInt! # uint256
# }

type Member @entity {
  id: Bytes! # address
  address: String! # address
  balance: BigInt! # uint256
  delegateBalance: BigInt! # uint256
  delegate: Bytes! # address
}

type Proposal @entity {
  id: Bytes!
  proposalId: BigInt! # uint256
  proposer: Member!
  targets: [Bytes!]! # address[]
  values: [BigInt!]! # uint256[]
  signatures: [String!]! # string[]
  calldatas: [Bytes!]! # bytes[]
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  description: String! # string
  canceled: Boolean! # bool
  executed: Boolean! # bool
  voteCast: [VoteCast!]! @derivedFrom(field: "proposal")
}

enum ProposalActivityType {
  CREATE
  CANCEL
  EXECUTE
}
type ProposalActivity @entity {
  id: String!
  activity: ProposalActivityType!
  member: Member!
  proposal: Proposal!
}

enum GovernorSettingActivityType {
  ProposalThresholdSet
  QuorumNumeratorUpdated
  VotingDelaySet
  VotingPeriodSet
}
type GovernorSettingActivity @entity {
  id: String!
  activity: GovernorSettingActivityType!
  member: Member!
  oldValue: BigInt!
  newValue: BigInt!
}

type VoteCast @entity {
  id: String!
  voter: Member! # address
  proposalId: BigInt! # uint256
  support: Int! # uint8
  weight: BigInt! # uint256
  reason: String! # string
  params: Bytes # bytes
  proposal: Proposal!
}